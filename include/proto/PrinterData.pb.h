// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrinterData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PrinterData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PrinterData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PrinterData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PrinterData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PrinterData_2eproto;
namespace printer {
class ChangeConfig;
class ChangeConfigDefaultTypeInternal;
extern ChangeConfigDefaultTypeInternal _ChangeConfig_default_instance_;
class KeepAlive;
class KeepAliveDefaultTypeInternal;
extern KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
class PrintConfig;
class PrintConfigDefaultTypeInternal;
extern PrintConfigDefaultTypeInternal _PrintConfig_default_instance_;
class PrinterStatus;
class PrinterStatusDefaultTypeInternal;
extern PrinterStatusDefaultTypeInternal _PrinterStatus_default_instance_;
class RequestStatus;
class RequestStatusDefaultTypeInternal;
extern RequestStatusDefaultTypeInternal _RequestStatus_default_instance_;
}  // namespace printer
PROTOBUF_NAMESPACE_OPEN
template<> ::printer::ChangeConfig* Arena::CreateMaybeMessage<::printer::ChangeConfig>(Arena*);
template<> ::printer::KeepAlive* Arena::CreateMaybeMessage<::printer::KeepAlive>(Arena*);
template<> ::printer::PrintConfig* Arena::CreateMaybeMessage<::printer::PrintConfig>(Arena*);
template<> ::printer::PrinterStatus* Arena::CreateMaybeMessage<::printer::PrinterStatus>(Arena*);
template<> ::printer::RequestStatus* Arena::CreateMaybeMessage<::printer::RequestStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace printer {

enum ChangeConfig_ConfigChangeType : int {
  ChangeConfig_ConfigChangeType_ADD = 0,
  ChangeConfig_ConfigChangeType_REMOVE = 1,
  ChangeConfig_ConfigChangeType_ChangeConfig_ConfigChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChangeConfig_ConfigChangeType_ChangeConfig_ConfigChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChangeConfig_ConfigChangeType_IsValid(int value);
constexpr ChangeConfig_ConfigChangeType ChangeConfig_ConfigChangeType_ConfigChangeType_MIN = ChangeConfig_ConfigChangeType_ADD;
constexpr ChangeConfig_ConfigChangeType ChangeConfig_ConfigChangeType_ConfigChangeType_MAX = ChangeConfig_ConfigChangeType_REMOVE;
constexpr int ChangeConfig_ConfigChangeType_ConfigChangeType_ARRAYSIZE = ChangeConfig_ConfigChangeType_ConfigChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeConfig_ConfigChangeType_descriptor();
template<typename T>
inline const std::string& ChangeConfig_ConfigChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChangeConfig_ConfigChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChangeConfig_ConfigChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChangeConfig_ConfigChangeType_descriptor(), enum_t_value);
}
inline bool ChangeConfig_ConfigChangeType_Parse(
    const std::string& name, ChangeConfig_ConfigChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChangeConfig_ConfigChangeType>(
    ChangeConfig_ConfigChangeType_descriptor(), name, value);
}
// ===================================================================

class KeepAlive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:printer.KeepAlive) */ {
 public:
  inline KeepAlive() : KeepAlive(nullptr) {};
  virtual ~KeepAlive();

  KeepAlive(const KeepAlive& from);
  KeepAlive(KeepAlive&& from) noexcept
    : KeepAlive() {
    *this = ::std::move(from);
  }

  inline KeepAlive& operator=(const KeepAlive& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAlive& operator=(KeepAlive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeepAlive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeepAlive* internal_default_instance() {
    return reinterpret_cast<const KeepAlive*>(
               &_KeepAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeepAlive& a, KeepAlive& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAlive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAlive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeepAlive* New() const final {
    return CreateMaybeMessage<KeepAlive>(nullptr);
  }

  KeepAlive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeepAlive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeepAlive& from);
  void MergeFrom(const KeepAlive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAlive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "printer.KeepAlive";
  }
  protected:
  explicit KeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeepAliveFieldNumber = 1,
  };
  // bool keepAlive = 1;
  void clear_keepalive();
  bool keepalive() const;
  void set_keepalive(bool value);
  private:
  bool _internal_keepalive() const;
  void _internal_set_keepalive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:printer.KeepAlive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool keepalive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class PrintConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:printer.PrintConfig) */ {
 public:
  inline PrintConfig() : PrintConfig(nullptr) {};
  virtual ~PrintConfig();

  PrintConfig(const PrintConfig& from);
  PrintConfig(PrintConfig&& from) noexcept
    : PrintConfig() {
    *this = ::std::move(from);
  }

  inline PrintConfig& operator=(const PrintConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintConfig& operator=(PrintConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintConfig* internal_default_instance() {
    return reinterpret_cast<const PrintConfig*>(
               &_PrintConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrintConfig& a, PrintConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrintConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintConfig* New() const final {
    return CreateMaybeMessage<PrintConfig>(nullptr);
  }

  PrintConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintConfig& from);
  void MergeFrom(const PrintConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "printer.PrintConfig";
  }
  protected:
  explicit PrintConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTemperatureFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 temperature = 1;
  void clear_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 temperature() const;
  void set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temperature() const;
  void _internal_set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:printer.PrintConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class ChangeConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:printer.ChangeConfig) */ {
 public:
  inline ChangeConfig() : ChangeConfig(nullptr) {};
  virtual ~ChangeConfig();

  ChangeConfig(const ChangeConfig& from);
  ChangeConfig(ChangeConfig&& from) noexcept
    : ChangeConfig() {
    *this = ::std::move(from);
  }

  inline ChangeConfig& operator=(const ChangeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeConfig& operator=(ChangeConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeConfig* internal_default_instance() {
    return reinterpret_cast<const ChangeConfig*>(
               &_ChangeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChangeConfig& a, ChangeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeConfig* New() const final {
    return CreateMaybeMessage<ChangeConfig>(nullptr);
  }

  ChangeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeConfig& from);
  void MergeFrom(const ChangeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "printer.ChangeConfig";
  }
  protected:
  explicit ChangeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChangeConfig_ConfigChangeType ConfigChangeType;
  static constexpr ConfigChangeType ADD =
    ChangeConfig_ConfigChangeType_ADD;
  static constexpr ConfigChangeType REMOVE =
    ChangeConfig_ConfigChangeType_REMOVE;
  static inline bool ConfigChangeType_IsValid(int value) {
    return ChangeConfig_ConfigChangeType_IsValid(value);
  }
  static constexpr ConfigChangeType ConfigChangeType_MIN =
    ChangeConfig_ConfigChangeType_ConfigChangeType_MIN;
  static constexpr ConfigChangeType ConfigChangeType_MAX =
    ChangeConfig_ConfigChangeType_ConfigChangeType_MAX;
  static constexpr int ConfigChangeType_ARRAYSIZE =
    ChangeConfig_ConfigChangeType_ConfigChangeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ConfigChangeType_descriptor() {
    return ChangeConfig_ConfigChangeType_descriptor();
  }
  template<typename T>
  static inline const std::string& ConfigChangeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConfigChangeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConfigChangeType_Name.");
    return ChangeConfig_ConfigChangeType_Name(enum_t_value);
  }
  static inline bool ConfigChangeType_Parse(const std::string& name,
      ConfigChangeType* value) {
    return ChangeConfig_ConfigChangeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 2,
    kChangeTypeFieldNumber = 1,
  };
  // .printer.PrintConfig config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::printer::PrintConfig& config() const;
  ::printer::PrintConfig* release_config();
  ::printer::PrintConfig* mutable_config();
  void set_allocated_config(::printer::PrintConfig* config);
  private:
  const ::printer::PrintConfig& _internal_config() const;
  ::printer::PrintConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::printer::PrintConfig* config);
  ::printer::PrintConfig* unsafe_arena_release_config();

  // .printer.ChangeConfig.ConfigChangeType changeType = 1;
  void clear_changetype();
  ::printer::ChangeConfig_ConfigChangeType changetype() const;
  void set_changetype(::printer::ChangeConfig_ConfigChangeType value);
  private:
  ::printer::ChangeConfig_ConfigChangeType _internal_changetype() const;
  void _internal_set_changetype(::printer::ChangeConfig_ConfigChangeType value);
  public:

  // @@protoc_insertion_point(class_scope:printer.ChangeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::printer::PrintConfig* config_;
  int changetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class RequestStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:printer.RequestStatus) */ {
 public:
  inline RequestStatus() : RequestStatus(nullptr) {};
  virtual ~RequestStatus();

  RequestStatus(const RequestStatus& from);
  RequestStatus(RequestStatus&& from) noexcept
    : RequestStatus() {
    *this = ::std::move(from);
  }

  inline RequestStatus& operator=(const RequestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestStatus& operator=(RequestStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestStatus* internal_default_instance() {
    return reinterpret_cast<const RequestStatus*>(
               &_RequestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestStatus& a, RequestStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestStatus* New() const final {
    return CreateMaybeMessage<RequestStatus>(nullptr);
  }

  RequestStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestStatus& from);
  void MergeFrom(const RequestStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "printer.RequestStatus";
  }
  protected:
  explicit RequestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendConfigsFieldNumber = 1,
  };
  // bool sendConfigs = 1;
  void clear_sendconfigs();
  bool sendconfigs() const;
  void set_sendconfigs(bool value);
  private:
  bool _internal_sendconfigs() const;
  void _internal_set_sendconfigs(bool value);
  public:

  // @@protoc_insertion_point(class_scope:printer.RequestStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool sendconfigs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class PrinterStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:printer.PrinterStatus) */ {
 public:
  inline PrinterStatus() : PrinterStatus(nullptr) {};
  virtual ~PrinterStatus();

  PrinterStatus(const PrinterStatus& from);
  PrinterStatus(PrinterStatus&& from) noexcept
    : PrinterStatus() {
    *this = ::std::move(from);
  }

  inline PrinterStatus& operator=(const PrinterStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterStatus& operator=(PrinterStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrinterStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterStatus* internal_default_instance() {
    return reinterpret_cast<const PrinterStatus*>(
               &_PrinterStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrinterStatus& a, PrinterStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PrinterStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrinterStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrinterStatus* New() const final {
    return CreateMaybeMessage<PrinterStatus>(nullptr);
  }

  PrinterStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrinterStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrinterStatus& from);
  void MergeFrom(const PrinterStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrinterStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "printer.PrinterStatus";
  }
  protected:
  explicit PrinterStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrintConfigsFieldNumber = 5,
    kIsTempControlActiveFieldNumber = 1,
    kTemperatureOutsideFieldNumber = 2,
    kTemperatureInsideTopFieldNumber = 3,
    kTemperatureInsideBottomFieldNumber = 4,
  };
  // repeated .printer.PrintConfig printConfigs = 5;
  int printconfigs_size() const;
  private:
  int _internal_printconfigs_size() const;
  public:
  void clear_printconfigs();
  ::printer::PrintConfig* mutable_printconfigs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::printer::PrintConfig >*
      mutable_printconfigs();
  private:
  const ::printer::PrintConfig& _internal_printconfigs(int index) const;
  ::printer::PrintConfig* _internal_add_printconfigs();
  public:
  const ::printer::PrintConfig& printconfigs(int index) const;
  ::printer::PrintConfig* add_printconfigs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::printer::PrintConfig >&
      printconfigs() const;

  // bool isTempControlActive = 1;
  void clear_istempcontrolactive();
  bool istempcontrolactive() const;
  void set_istempcontrolactive(bool value);
  private:
  bool _internal_istempcontrolactive() const;
  void _internal_set_istempcontrolactive(bool value);
  public:

  // float temperatureOutside = 2;
  void clear_temperatureoutside();
  float temperatureoutside() const;
  void set_temperatureoutside(float value);
  private:
  float _internal_temperatureoutside() const;
  void _internal_set_temperatureoutside(float value);
  public:

  // float temperatureInsideTop = 3;
  void clear_temperatureinsidetop();
  float temperatureinsidetop() const;
  void set_temperatureinsidetop(float value);
  private:
  float _internal_temperatureinsidetop() const;
  void _internal_set_temperatureinsidetop(float value);
  public:

  // float temperatureInsideBottom = 4;
  void clear_temperatureinsidebottom();
  float temperatureinsidebottom() const;
  void set_temperatureinsidebottom(float value);
  private:
  float _internal_temperatureinsidebottom() const;
  void _internal_set_temperatureinsidebottom(float value);
  public:

  // @@protoc_insertion_point(class_scope:printer.PrinterStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::printer::PrintConfig > printconfigs_;
  bool istempcontrolactive_;
  float temperatureoutside_;
  float temperatureinsidetop_;
  float temperatureinsidebottom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeepAlive

// bool keepAlive = 1;
inline void KeepAlive::clear_keepalive() {
  keepalive_ = false;
}
inline bool KeepAlive::_internal_keepalive() const {
  return keepalive_;
}
inline bool KeepAlive::keepalive() const {
  // @@protoc_insertion_point(field_get:printer.KeepAlive.keepAlive)
  return _internal_keepalive();
}
inline void KeepAlive::_internal_set_keepalive(bool value) {
  
  keepalive_ = value;
}
inline void KeepAlive::set_keepalive(bool value) {
  _internal_set_keepalive(value);
  // @@protoc_insertion_point(field_set:printer.KeepAlive.keepAlive)
}

// -------------------------------------------------------------------

// PrintConfig

// int32 temperature = 1;
inline void PrintConfig::clear_temperature() {
  temperature_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintConfig::_internal_temperature() const {
  return temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintConfig::temperature() const {
  // @@protoc_insertion_point(field_get:printer.PrintConfig.temperature)
  return _internal_temperature();
}
inline void PrintConfig::_internal_set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  temperature_ = value;
}
inline void PrintConfig::set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:printer.PrintConfig.temperature)
}

// string name = 2;
inline void PrintConfig::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrintConfig::name() const {
  // @@protoc_insertion_point(field_get:printer.PrintConfig.name)
  return _internal_name();
}
inline void PrintConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:printer.PrintConfig.name)
}
inline std::string* PrintConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:printer.PrintConfig.name)
  return _internal_mutable_name();
}
inline const std::string& PrintConfig::_internal_name() const {
  return name_.Get();
}
inline void PrintConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrintConfig::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:printer.PrintConfig.name)
}
inline void PrintConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:printer.PrintConfig.name)
}
inline void PrintConfig::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:printer.PrintConfig.name)
}
inline std::string* PrintConfig::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrintConfig::release_name() {
  // @@protoc_insertion_point(field_release:printer.PrintConfig.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrintConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:printer.PrintConfig.name)
}
inline std::string* PrintConfig::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:printer.PrintConfig.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PrintConfig::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:printer.PrintConfig.name)
}

// -------------------------------------------------------------------

// ChangeConfig

// .printer.ChangeConfig.ConfigChangeType changeType = 1;
inline void ChangeConfig::clear_changetype() {
  changetype_ = 0;
}
inline ::printer::ChangeConfig_ConfigChangeType ChangeConfig::_internal_changetype() const {
  return static_cast< ::printer::ChangeConfig_ConfigChangeType >(changetype_);
}
inline ::printer::ChangeConfig_ConfigChangeType ChangeConfig::changetype() const {
  // @@protoc_insertion_point(field_get:printer.ChangeConfig.changeType)
  return _internal_changetype();
}
inline void ChangeConfig::_internal_set_changetype(::printer::ChangeConfig_ConfigChangeType value) {
  
  changetype_ = value;
}
inline void ChangeConfig::set_changetype(::printer::ChangeConfig_ConfigChangeType value) {
  _internal_set_changetype(value);
  // @@protoc_insertion_point(field_set:printer.ChangeConfig.changeType)
}

// .printer.PrintConfig config = 2;
inline bool ChangeConfig::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool ChangeConfig::has_config() const {
  return _internal_has_config();
}
inline void ChangeConfig::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::printer::PrintConfig& ChangeConfig::_internal_config() const {
  const ::printer::PrintConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::printer::PrintConfig*>(
      &::printer::_PrintConfig_default_instance_);
}
inline const ::printer::PrintConfig& ChangeConfig::config() const {
  // @@protoc_insertion_point(field_get:printer.ChangeConfig.config)
  return _internal_config();
}
inline void ChangeConfig::unsafe_arena_set_allocated_config(
    ::printer::PrintConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:printer.ChangeConfig.config)
}
inline ::printer::PrintConfig* ChangeConfig::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::printer::PrintConfig* ChangeConfig::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:printer.ChangeConfig.config)
  
  ::printer::PrintConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::printer::PrintConfig* ChangeConfig::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::printer::PrintConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::printer::PrintConfig* ChangeConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable:printer.ChangeConfig.config)
  return _internal_mutable_config();
}
inline void ChangeConfig::set_allocated_config(::printer::PrintConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:printer.ChangeConfig.config)
}

// -------------------------------------------------------------------

// RequestStatus

// bool sendConfigs = 1;
inline void RequestStatus::clear_sendconfigs() {
  sendconfigs_ = false;
}
inline bool RequestStatus::_internal_sendconfigs() const {
  return sendconfigs_;
}
inline bool RequestStatus::sendconfigs() const {
  // @@protoc_insertion_point(field_get:printer.RequestStatus.sendConfigs)
  return _internal_sendconfigs();
}
inline void RequestStatus::_internal_set_sendconfigs(bool value) {
  
  sendconfigs_ = value;
}
inline void RequestStatus::set_sendconfigs(bool value) {
  _internal_set_sendconfigs(value);
  // @@protoc_insertion_point(field_set:printer.RequestStatus.sendConfigs)
}

// -------------------------------------------------------------------

// PrinterStatus

// bool isTempControlActive = 1;
inline void PrinterStatus::clear_istempcontrolactive() {
  istempcontrolactive_ = false;
}
inline bool PrinterStatus::_internal_istempcontrolactive() const {
  return istempcontrolactive_;
}
inline bool PrinterStatus::istempcontrolactive() const {
  // @@protoc_insertion_point(field_get:printer.PrinterStatus.isTempControlActive)
  return _internal_istempcontrolactive();
}
inline void PrinterStatus::_internal_set_istempcontrolactive(bool value) {
  
  istempcontrolactive_ = value;
}
inline void PrinterStatus::set_istempcontrolactive(bool value) {
  _internal_set_istempcontrolactive(value);
  // @@protoc_insertion_point(field_set:printer.PrinterStatus.isTempControlActive)
}

// float temperatureOutside = 2;
inline void PrinterStatus::clear_temperatureoutside() {
  temperatureoutside_ = 0;
}
inline float PrinterStatus::_internal_temperatureoutside() const {
  return temperatureoutside_;
}
inline float PrinterStatus::temperatureoutside() const {
  // @@protoc_insertion_point(field_get:printer.PrinterStatus.temperatureOutside)
  return _internal_temperatureoutside();
}
inline void PrinterStatus::_internal_set_temperatureoutside(float value) {
  
  temperatureoutside_ = value;
}
inline void PrinterStatus::set_temperatureoutside(float value) {
  _internal_set_temperatureoutside(value);
  // @@protoc_insertion_point(field_set:printer.PrinterStatus.temperatureOutside)
}

// float temperatureInsideTop = 3;
inline void PrinterStatus::clear_temperatureinsidetop() {
  temperatureinsidetop_ = 0;
}
inline float PrinterStatus::_internal_temperatureinsidetop() const {
  return temperatureinsidetop_;
}
inline float PrinterStatus::temperatureinsidetop() const {
  // @@protoc_insertion_point(field_get:printer.PrinterStatus.temperatureInsideTop)
  return _internal_temperatureinsidetop();
}
inline void PrinterStatus::_internal_set_temperatureinsidetop(float value) {
  
  temperatureinsidetop_ = value;
}
inline void PrinterStatus::set_temperatureinsidetop(float value) {
  _internal_set_temperatureinsidetop(value);
  // @@protoc_insertion_point(field_set:printer.PrinterStatus.temperatureInsideTop)
}

// float temperatureInsideBottom = 4;
inline void PrinterStatus::clear_temperatureinsidebottom() {
  temperatureinsidebottom_ = 0;
}
inline float PrinterStatus::_internal_temperatureinsidebottom() const {
  return temperatureinsidebottom_;
}
inline float PrinterStatus::temperatureinsidebottom() const {
  // @@protoc_insertion_point(field_get:printer.PrinterStatus.temperatureInsideBottom)
  return _internal_temperatureinsidebottom();
}
inline void PrinterStatus::_internal_set_temperatureinsidebottom(float value) {
  
  temperatureinsidebottom_ = value;
}
inline void PrinterStatus::set_temperatureinsidebottom(float value) {
  _internal_set_temperatureinsidebottom(value);
  // @@protoc_insertion_point(field_set:printer.PrinterStatus.temperatureInsideBottom)
}

// repeated .printer.PrintConfig printConfigs = 5;
inline int PrinterStatus::_internal_printconfigs_size() const {
  return printconfigs_.size();
}
inline int PrinterStatus::printconfigs_size() const {
  return _internal_printconfigs_size();
}
inline void PrinterStatus::clear_printconfigs() {
  printconfigs_.Clear();
}
inline ::printer::PrintConfig* PrinterStatus::mutable_printconfigs(int index) {
  // @@protoc_insertion_point(field_mutable:printer.PrinterStatus.printConfigs)
  return printconfigs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::printer::PrintConfig >*
PrinterStatus::mutable_printconfigs() {
  // @@protoc_insertion_point(field_mutable_list:printer.PrinterStatus.printConfigs)
  return &printconfigs_;
}
inline const ::printer::PrintConfig& PrinterStatus::_internal_printconfigs(int index) const {
  return printconfigs_.Get(index);
}
inline const ::printer::PrintConfig& PrinterStatus::printconfigs(int index) const {
  // @@protoc_insertion_point(field_get:printer.PrinterStatus.printConfigs)
  return _internal_printconfigs(index);
}
inline ::printer::PrintConfig* PrinterStatus::_internal_add_printconfigs() {
  return printconfigs_.Add();
}
inline ::printer::PrintConfig* PrinterStatus::add_printconfigs() {
  // @@protoc_insertion_point(field_add:printer.PrinterStatus.printConfigs)
  return _internal_add_printconfigs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::printer::PrintConfig >&
PrinterStatus::printconfigs() const {
  // @@protoc_insertion_point(field_list:printer.PrinterStatus.printConfigs)
  return printconfigs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace printer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::printer::ChangeConfig_ConfigChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::printer::ChangeConfig_ConfigChangeType>() {
  return ::printer::ChangeConfig_ConfigChangeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PrinterData_2eproto
