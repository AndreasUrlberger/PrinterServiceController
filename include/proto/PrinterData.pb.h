// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrinterData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PrinterData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PrinterData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PrinterData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PrinterData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PrinterData_2eproto;
namespace Printer {
class AddPrintConfig;
class AddPrintConfigDefaultTypeInternal;
extern AddPrintConfigDefaultTypeInternal _AddPrintConfig_default_instance_;
class ChangeTempControl;
class ChangeTempControlDefaultTypeInternal;
extern ChangeTempControlDefaultTypeInternal _ChangeTempControl_default_instance_;
class PrintConfig;
class PrintConfigDefaultTypeInternal;
extern PrintConfigDefaultTypeInternal _PrintConfig_default_instance_;
class PrinterStatus;
class PrinterStatusDefaultTypeInternal;
extern PrinterStatusDefaultTypeInternal _PrinterStatus_default_instance_;
class RemovePrintConfig;
class RemovePrintConfigDefaultTypeInternal;
extern RemovePrintConfigDefaultTypeInternal _RemovePrintConfig_default_instance_;
class StatusRequest;
class StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
}  // namespace Printer
PROTOBUF_NAMESPACE_OPEN
template<> ::Printer::AddPrintConfig* Arena::CreateMaybeMessage<::Printer::AddPrintConfig>(Arena*);
template<> ::Printer::ChangeTempControl* Arena::CreateMaybeMessage<::Printer::ChangeTempControl>(Arena*);
template<> ::Printer::PrintConfig* Arena::CreateMaybeMessage<::Printer::PrintConfig>(Arena*);
template<> ::Printer::PrinterStatus* Arena::CreateMaybeMessage<::Printer::PrinterStatus>(Arena*);
template<> ::Printer::RemovePrintConfig* Arena::CreateMaybeMessage<::Printer::RemovePrintConfig>(Arena*);
template<> ::Printer::StatusRequest* Arena::CreateMaybeMessage<::Printer::StatusRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Printer {

// ===================================================================

class StatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Printer.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {};
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusRequest* New() const final {
    return CreateMaybeMessage<StatusRequest>(nullptr);
  }

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Printer.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludePrintConfigsFieldNumber = 1,
  };
  // bool include_print_configs = 1;
  void clear_include_print_configs();
  bool include_print_configs() const;
  void set_include_print_configs(bool value);
  private:
  bool _internal_include_print_configs() const;
  void _internal_set_include_print_configs(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Printer.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool include_print_configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class AddPrintConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Printer.AddPrintConfig) */ {
 public:
  inline AddPrintConfig() : AddPrintConfig(nullptr) {};
  virtual ~AddPrintConfig();

  AddPrintConfig(const AddPrintConfig& from);
  AddPrintConfig(AddPrintConfig&& from) noexcept
    : AddPrintConfig() {
    *this = ::std::move(from);
  }

  inline AddPrintConfig& operator=(const AddPrintConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPrintConfig& operator=(AddPrintConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddPrintConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddPrintConfig* internal_default_instance() {
    return reinterpret_cast<const AddPrintConfig*>(
               &_AddPrintConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddPrintConfig& a, AddPrintConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPrintConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPrintConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPrintConfig* New() const final {
    return CreateMaybeMessage<AddPrintConfig>(nullptr);
  }

  AddPrintConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPrintConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPrintConfig& from);
  void MergeFrom(const AddPrintConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPrintConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Printer.AddPrintConfig";
  }
  protected:
  explicit AddPrintConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrintConfigFieldNumber = 1,
  };
  // .Printer.PrintConfig print_config = 1;
  bool has_print_config() const;
  private:
  bool _internal_has_print_config() const;
  public:
  void clear_print_config();
  const ::Printer::PrintConfig& print_config() const;
  ::Printer::PrintConfig* release_print_config();
  ::Printer::PrintConfig* mutable_print_config();
  void set_allocated_print_config(::Printer::PrintConfig* print_config);
  private:
  const ::Printer::PrintConfig& _internal_print_config() const;
  ::Printer::PrintConfig* _internal_mutable_print_config();
  public:
  void unsafe_arena_set_allocated_print_config(
      ::Printer::PrintConfig* print_config);
  ::Printer::PrintConfig* unsafe_arena_release_print_config();

  // @@protoc_insertion_point(class_scope:Printer.AddPrintConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Printer::PrintConfig* print_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class ChangeTempControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Printer.ChangeTempControl) */ {
 public:
  inline ChangeTempControl() : ChangeTempControl(nullptr) {};
  virtual ~ChangeTempControl();

  ChangeTempControl(const ChangeTempControl& from);
  ChangeTempControl(ChangeTempControl&& from) noexcept
    : ChangeTempControl() {
    *this = ::std::move(from);
  }

  inline ChangeTempControl& operator=(const ChangeTempControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeTempControl& operator=(ChangeTempControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeTempControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeTempControl* internal_default_instance() {
    return reinterpret_cast<const ChangeTempControl*>(
               &_ChangeTempControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChangeTempControl& a, ChangeTempControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeTempControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeTempControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeTempControl* New() const final {
    return CreateMaybeMessage<ChangeTempControl>(nullptr);
  }

  ChangeTempControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeTempControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeTempControl& from);
  void MergeFrom(const ChangeTempControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeTempControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Printer.ChangeTempControl";
  }
  protected:
  explicit ChangeTempControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedPrintConfigFieldNumber = 2,
    kIsActiveFieldNumber = 1,
  };
  // .Printer.PrintConfig selected_print_config = 2;
  bool has_selected_print_config() const;
  private:
  bool _internal_has_selected_print_config() const;
  public:
  void clear_selected_print_config();
  const ::Printer::PrintConfig& selected_print_config() const;
  ::Printer::PrintConfig* release_selected_print_config();
  ::Printer::PrintConfig* mutable_selected_print_config();
  void set_allocated_selected_print_config(::Printer::PrintConfig* selected_print_config);
  private:
  const ::Printer::PrintConfig& _internal_selected_print_config() const;
  ::Printer::PrintConfig* _internal_mutable_selected_print_config();
  public:
  void unsafe_arena_set_allocated_selected_print_config(
      ::Printer::PrintConfig* selected_print_config);
  ::Printer::PrintConfig* unsafe_arena_release_selected_print_config();

  // bool is_active = 1;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Printer.ChangeTempControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Printer::PrintConfig* selected_print_config_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class RemovePrintConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Printer.RemovePrintConfig) */ {
 public:
  inline RemovePrintConfig() : RemovePrintConfig(nullptr) {};
  virtual ~RemovePrintConfig();

  RemovePrintConfig(const RemovePrintConfig& from);
  RemovePrintConfig(RemovePrintConfig&& from) noexcept
    : RemovePrintConfig() {
    *this = ::std::move(from);
  }

  inline RemovePrintConfig& operator=(const RemovePrintConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemovePrintConfig& operator=(RemovePrintConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemovePrintConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemovePrintConfig* internal_default_instance() {
    return reinterpret_cast<const RemovePrintConfig*>(
               &_RemovePrintConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemovePrintConfig& a, RemovePrintConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RemovePrintConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemovePrintConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemovePrintConfig* New() const final {
    return CreateMaybeMessage<RemovePrintConfig>(nullptr);
  }

  RemovePrintConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemovePrintConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemovePrintConfig& from);
  void MergeFrom(const RemovePrintConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemovePrintConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Printer.RemovePrintConfig";
  }
  protected:
  explicit RemovePrintConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrintConfigFieldNumber = 1,
  };
  // .Printer.PrintConfig print_config = 1;
  bool has_print_config() const;
  private:
  bool _internal_has_print_config() const;
  public:
  void clear_print_config();
  const ::Printer::PrintConfig& print_config() const;
  ::Printer::PrintConfig* release_print_config();
  ::Printer::PrintConfig* mutable_print_config();
  void set_allocated_print_config(::Printer::PrintConfig* print_config);
  private:
  const ::Printer::PrintConfig& _internal_print_config() const;
  ::Printer::PrintConfig* _internal_mutable_print_config();
  public:
  void unsafe_arena_set_allocated_print_config(
      ::Printer::PrintConfig* print_config);
  ::Printer::PrintConfig* unsafe_arena_release_print_config();

  // @@protoc_insertion_point(class_scope:Printer.RemovePrintConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Printer::PrintConfig* print_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class PrintConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Printer.PrintConfig) */ {
 public:
  inline PrintConfig() : PrintConfig(nullptr) {};
  virtual ~PrintConfig();

  PrintConfig(const PrintConfig& from);
  PrintConfig(PrintConfig&& from) noexcept
    : PrintConfig() {
    *this = ::std::move(from);
  }

  inline PrintConfig& operator=(const PrintConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintConfig& operator=(PrintConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrintConfig* internal_default_instance() {
    return reinterpret_cast<const PrintConfig*>(
               &_PrintConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrintConfig& a, PrintConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrintConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintConfig* New() const final {
    return CreateMaybeMessage<PrintConfig>(nullptr);
  }

  PrintConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintConfig& from);
  void MergeFrom(const PrintConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Printer.PrintConfig";
  }
  protected:
  explicit PrintConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTemperatureFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 temperature = 1;
  void clear_temperature();
  ::PROTOBUF_NAMESPACE_ID::int32 temperature() const;
  void set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temperature() const;
  void _internal_set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Printer.PrintConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// -------------------------------------------------------------------

class PrinterStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Printer.PrinterStatus) */ {
 public:
  inline PrinterStatus() : PrinterStatus(nullptr) {};
  virtual ~PrinterStatus();

  PrinterStatus(const PrinterStatus& from);
  PrinterStatus(PrinterStatus&& from) noexcept
    : PrinterStatus() {
    *this = ::std::move(from);
  }

  inline PrinterStatus& operator=(const PrinterStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrinterStatus& operator=(PrinterStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrinterStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrinterStatus* internal_default_instance() {
    return reinterpret_cast<const PrinterStatus*>(
               &_PrinterStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PrinterStatus& a, PrinterStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PrinterStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrinterStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrinterStatus* New() const final {
    return CreateMaybeMessage<PrinterStatus>(nullptr);
  }

  PrinterStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrinterStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrinterStatus& from);
  void MergeFrom(const PrinterStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrinterStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Printer.PrinterStatus";
  }
  protected:
  explicit PrinterStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PrinterData_2eproto);
    return ::descriptor_table_PrinterData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrintConfigsFieldNumber = 6,
    kCurrentPrintConfigFieldNumber = 5,
    kIsTempControlActiveFieldNumber = 1,
    kTemperatureOutsideFieldNumber = 2,
    kTemperatureInsideTopFieldNumber = 3,
    kTemperatureInsideBottomFieldNumber = 4,
    kFanSpeedFieldNumber = 7,
  };
  // repeated .Printer.PrintConfig print_configs = 6;
  int print_configs_size() const;
  private:
  int _internal_print_configs_size() const;
  public:
  void clear_print_configs();
  ::Printer::PrintConfig* mutable_print_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Printer::PrintConfig >*
      mutable_print_configs();
  private:
  const ::Printer::PrintConfig& _internal_print_configs(int index) const;
  ::Printer::PrintConfig* _internal_add_print_configs();
  public:
  const ::Printer::PrintConfig& print_configs(int index) const;
  ::Printer::PrintConfig* add_print_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Printer::PrintConfig >&
      print_configs() const;

  // .Printer.PrintConfig current_print_config = 5;
  bool has_current_print_config() const;
  private:
  bool _internal_has_current_print_config() const;
  public:
  void clear_current_print_config();
  const ::Printer::PrintConfig& current_print_config() const;
  ::Printer::PrintConfig* release_current_print_config();
  ::Printer::PrintConfig* mutable_current_print_config();
  void set_allocated_current_print_config(::Printer::PrintConfig* current_print_config);
  private:
  const ::Printer::PrintConfig& _internal_current_print_config() const;
  ::Printer::PrintConfig* _internal_mutable_current_print_config();
  public:
  void unsafe_arena_set_allocated_current_print_config(
      ::Printer::PrintConfig* current_print_config);
  ::Printer::PrintConfig* unsafe_arena_release_current_print_config();

  // bool is_temp_control_active = 1;
  void clear_is_temp_control_active();
  bool is_temp_control_active() const;
  void set_is_temp_control_active(bool value);
  private:
  bool _internal_is_temp_control_active() const;
  void _internal_set_is_temp_control_active(bool value);
  public:

  // float temperature_outside = 2;
  void clear_temperature_outside();
  float temperature_outside() const;
  void set_temperature_outside(float value);
  private:
  float _internal_temperature_outside() const;
  void _internal_set_temperature_outside(float value);
  public:

  // float temperature_inside_top = 3;
  void clear_temperature_inside_top();
  float temperature_inside_top() const;
  void set_temperature_inside_top(float value);
  private:
  float _internal_temperature_inside_top() const;
  void _internal_set_temperature_inside_top(float value);
  public:

  // float temperature_inside_bottom = 4;
  void clear_temperature_inside_bottom();
  float temperature_inside_bottom() const;
  void set_temperature_inside_bottom(float value);
  private:
  float _internal_temperature_inside_bottom() const;
  void _internal_set_temperature_inside_bottom(float value);
  public:

  // float fan_speed = 7;
  void clear_fan_speed();
  float fan_speed() const;
  void set_fan_speed(float value);
  private:
  float _internal_fan_speed() const;
  void _internal_set_fan_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:Printer.PrinterStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Printer::PrintConfig > print_configs_;
  ::Printer::PrintConfig* current_print_config_;
  bool is_temp_control_active_;
  float temperature_outside_;
  float temperature_inside_top_;
  float temperature_inside_bottom_;
  float fan_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PrinterData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusRequest

// bool include_print_configs = 1;
inline void StatusRequest::clear_include_print_configs() {
  include_print_configs_ = false;
}
inline bool StatusRequest::_internal_include_print_configs() const {
  return include_print_configs_;
}
inline bool StatusRequest::include_print_configs() const {
  // @@protoc_insertion_point(field_get:Printer.StatusRequest.include_print_configs)
  return _internal_include_print_configs();
}
inline void StatusRequest::_internal_set_include_print_configs(bool value) {
  
  include_print_configs_ = value;
}
inline void StatusRequest::set_include_print_configs(bool value) {
  _internal_set_include_print_configs(value);
  // @@protoc_insertion_point(field_set:Printer.StatusRequest.include_print_configs)
}

// -------------------------------------------------------------------

// AddPrintConfig

// .Printer.PrintConfig print_config = 1;
inline bool AddPrintConfig::_internal_has_print_config() const {
  return this != internal_default_instance() && print_config_ != nullptr;
}
inline bool AddPrintConfig::has_print_config() const {
  return _internal_has_print_config();
}
inline void AddPrintConfig::clear_print_config() {
  if (GetArena() == nullptr && print_config_ != nullptr) {
    delete print_config_;
  }
  print_config_ = nullptr;
}
inline const ::Printer::PrintConfig& AddPrintConfig::_internal_print_config() const {
  const ::Printer::PrintConfig* p = print_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Printer::PrintConfig*>(
      &::Printer::_PrintConfig_default_instance_);
}
inline const ::Printer::PrintConfig& AddPrintConfig::print_config() const {
  // @@protoc_insertion_point(field_get:Printer.AddPrintConfig.print_config)
  return _internal_print_config();
}
inline void AddPrintConfig::unsafe_arena_set_allocated_print_config(
    ::Printer::PrintConfig* print_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(print_config_);
  }
  print_config_ = print_config;
  if (print_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Printer.AddPrintConfig.print_config)
}
inline ::Printer::PrintConfig* AddPrintConfig::release_print_config() {
  auto temp = unsafe_arena_release_print_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Printer::PrintConfig* AddPrintConfig::unsafe_arena_release_print_config() {
  // @@protoc_insertion_point(field_release:Printer.AddPrintConfig.print_config)
  
  ::Printer::PrintConfig* temp = print_config_;
  print_config_ = nullptr;
  return temp;
}
inline ::Printer::PrintConfig* AddPrintConfig::_internal_mutable_print_config() {
  
  if (print_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::Printer::PrintConfig>(GetArena());
    print_config_ = p;
  }
  return print_config_;
}
inline ::Printer::PrintConfig* AddPrintConfig::mutable_print_config() {
  // @@protoc_insertion_point(field_mutable:Printer.AddPrintConfig.print_config)
  return _internal_mutable_print_config();
}
inline void AddPrintConfig::set_allocated_print_config(::Printer::PrintConfig* print_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete print_config_;
  }
  if (print_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(print_config);
    if (message_arena != submessage_arena) {
      print_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print_config, submessage_arena);
    }
    
  } else {
    
  }
  print_config_ = print_config;
  // @@protoc_insertion_point(field_set_allocated:Printer.AddPrintConfig.print_config)
}

// -------------------------------------------------------------------

// ChangeTempControl

// bool is_active = 1;
inline void ChangeTempControl::clear_is_active() {
  is_active_ = false;
}
inline bool ChangeTempControl::_internal_is_active() const {
  return is_active_;
}
inline bool ChangeTempControl::is_active() const {
  // @@protoc_insertion_point(field_get:Printer.ChangeTempControl.is_active)
  return _internal_is_active();
}
inline void ChangeTempControl::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void ChangeTempControl::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:Printer.ChangeTempControl.is_active)
}

// .Printer.PrintConfig selected_print_config = 2;
inline bool ChangeTempControl::_internal_has_selected_print_config() const {
  return this != internal_default_instance() && selected_print_config_ != nullptr;
}
inline bool ChangeTempControl::has_selected_print_config() const {
  return _internal_has_selected_print_config();
}
inline void ChangeTempControl::clear_selected_print_config() {
  if (GetArena() == nullptr && selected_print_config_ != nullptr) {
    delete selected_print_config_;
  }
  selected_print_config_ = nullptr;
}
inline const ::Printer::PrintConfig& ChangeTempControl::_internal_selected_print_config() const {
  const ::Printer::PrintConfig* p = selected_print_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Printer::PrintConfig*>(
      &::Printer::_PrintConfig_default_instance_);
}
inline const ::Printer::PrintConfig& ChangeTempControl::selected_print_config() const {
  // @@protoc_insertion_point(field_get:Printer.ChangeTempControl.selected_print_config)
  return _internal_selected_print_config();
}
inline void ChangeTempControl::unsafe_arena_set_allocated_selected_print_config(
    ::Printer::PrintConfig* selected_print_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_print_config_);
  }
  selected_print_config_ = selected_print_config;
  if (selected_print_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Printer.ChangeTempControl.selected_print_config)
}
inline ::Printer::PrintConfig* ChangeTempControl::release_selected_print_config() {
  auto temp = unsafe_arena_release_selected_print_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Printer::PrintConfig* ChangeTempControl::unsafe_arena_release_selected_print_config() {
  // @@protoc_insertion_point(field_release:Printer.ChangeTempControl.selected_print_config)
  
  ::Printer::PrintConfig* temp = selected_print_config_;
  selected_print_config_ = nullptr;
  return temp;
}
inline ::Printer::PrintConfig* ChangeTempControl::_internal_mutable_selected_print_config() {
  
  if (selected_print_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::Printer::PrintConfig>(GetArena());
    selected_print_config_ = p;
  }
  return selected_print_config_;
}
inline ::Printer::PrintConfig* ChangeTempControl::mutable_selected_print_config() {
  // @@protoc_insertion_point(field_mutable:Printer.ChangeTempControl.selected_print_config)
  return _internal_mutable_selected_print_config();
}
inline void ChangeTempControl::set_allocated_selected_print_config(::Printer::PrintConfig* selected_print_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selected_print_config_;
  }
  if (selected_print_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selected_print_config);
    if (message_arena != submessage_arena) {
      selected_print_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_print_config, submessage_arena);
    }
    
  } else {
    
  }
  selected_print_config_ = selected_print_config;
  // @@protoc_insertion_point(field_set_allocated:Printer.ChangeTempControl.selected_print_config)
}

// -------------------------------------------------------------------

// RemovePrintConfig

// .Printer.PrintConfig print_config = 1;
inline bool RemovePrintConfig::_internal_has_print_config() const {
  return this != internal_default_instance() && print_config_ != nullptr;
}
inline bool RemovePrintConfig::has_print_config() const {
  return _internal_has_print_config();
}
inline void RemovePrintConfig::clear_print_config() {
  if (GetArena() == nullptr && print_config_ != nullptr) {
    delete print_config_;
  }
  print_config_ = nullptr;
}
inline const ::Printer::PrintConfig& RemovePrintConfig::_internal_print_config() const {
  const ::Printer::PrintConfig* p = print_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Printer::PrintConfig*>(
      &::Printer::_PrintConfig_default_instance_);
}
inline const ::Printer::PrintConfig& RemovePrintConfig::print_config() const {
  // @@protoc_insertion_point(field_get:Printer.RemovePrintConfig.print_config)
  return _internal_print_config();
}
inline void RemovePrintConfig::unsafe_arena_set_allocated_print_config(
    ::Printer::PrintConfig* print_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(print_config_);
  }
  print_config_ = print_config;
  if (print_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Printer.RemovePrintConfig.print_config)
}
inline ::Printer::PrintConfig* RemovePrintConfig::release_print_config() {
  auto temp = unsafe_arena_release_print_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Printer::PrintConfig* RemovePrintConfig::unsafe_arena_release_print_config() {
  // @@protoc_insertion_point(field_release:Printer.RemovePrintConfig.print_config)
  
  ::Printer::PrintConfig* temp = print_config_;
  print_config_ = nullptr;
  return temp;
}
inline ::Printer::PrintConfig* RemovePrintConfig::_internal_mutable_print_config() {
  
  if (print_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::Printer::PrintConfig>(GetArena());
    print_config_ = p;
  }
  return print_config_;
}
inline ::Printer::PrintConfig* RemovePrintConfig::mutable_print_config() {
  // @@protoc_insertion_point(field_mutable:Printer.RemovePrintConfig.print_config)
  return _internal_mutable_print_config();
}
inline void RemovePrintConfig::set_allocated_print_config(::Printer::PrintConfig* print_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete print_config_;
  }
  if (print_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(print_config);
    if (message_arena != submessage_arena) {
      print_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print_config, submessage_arena);
    }
    
  } else {
    
  }
  print_config_ = print_config;
  // @@protoc_insertion_point(field_set_allocated:Printer.RemovePrintConfig.print_config)
}

// -------------------------------------------------------------------

// PrintConfig

// int32 temperature = 1;
inline void PrintConfig::clear_temperature() {
  temperature_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintConfig::_internal_temperature() const {
  return temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrintConfig::temperature() const {
  // @@protoc_insertion_point(field_get:Printer.PrintConfig.temperature)
  return _internal_temperature();
}
inline void PrintConfig::_internal_set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  temperature_ = value;
}
inline void PrintConfig::set_temperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:Printer.PrintConfig.temperature)
}

// string name = 2;
inline void PrintConfig::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrintConfig::name() const {
  // @@protoc_insertion_point(field_get:Printer.PrintConfig.name)
  return _internal_name();
}
inline void PrintConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Printer.PrintConfig.name)
}
inline std::string* PrintConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Printer.PrintConfig.name)
  return _internal_mutable_name();
}
inline const std::string& PrintConfig::_internal_name() const {
  return name_.Get();
}
inline void PrintConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrintConfig::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Printer.PrintConfig.name)
}
inline void PrintConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Printer.PrintConfig.name)
}
inline void PrintConfig::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Printer.PrintConfig.name)
}
inline std::string* PrintConfig::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrintConfig::release_name() {
  // @@protoc_insertion_point(field_release:Printer.PrintConfig.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrintConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Printer.PrintConfig.name)
}
inline std::string* PrintConfig::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Printer.PrintConfig.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PrintConfig::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Printer.PrintConfig.name)
}

// -------------------------------------------------------------------

// PrinterStatus

// bool is_temp_control_active = 1;
inline void PrinterStatus::clear_is_temp_control_active() {
  is_temp_control_active_ = false;
}
inline bool PrinterStatus::_internal_is_temp_control_active() const {
  return is_temp_control_active_;
}
inline bool PrinterStatus::is_temp_control_active() const {
  // @@protoc_insertion_point(field_get:Printer.PrinterStatus.is_temp_control_active)
  return _internal_is_temp_control_active();
}
inline void PrinterStatus::_internal_set_is_temp_control_active(bool value) {
  
  is_temp_control_active_ = value;
}
inline void PrinterStatus::set_is_temp_control_active(bool value) {
  _internal_set_is_temp_control_active(value);
  // @@protoc_insertion_point(field_set:Printer.PrinterStatus.is_temp_control_active)
}

// float temperature_outside = 2;
inline void PrinterStatus::clear_temperature_outside() {
  temperature_outside_ = 0;
}
inline float PrinterStatus::_internal_temperature_outside() const {
  return temperature_outside_;
}
inline float PrinterStatus::temperature_outside() const {
  // @@protoc_insertion_point(field_get:Printer.PrinterStatus.temperature_outside)
  return _internal_temperature_outside();
}
inline void PrinterStatus::_internal_set_temperature_outside(float value) {
  
  temperature_outside_ = value;
}
inline void PrinterStatus::set_temperature_outside(float value) {
  _internal_set_temperature_outside(value);
  // @@protoc_insertion_point(field_set:Printer.PrinterStatus.temperature_outside)
}

// float temperature_inside_top = 3;
inline void PrinterStatus::clear_temperature_inside_top() {
  temperature_inside_top_ = 0;
}
inline float PrinterStatus::_internal_temperature_inside_top() const {
  return temperature_inside_top_;
}
inline float PrinterStatus::temperature_inside_top() const {
  // @@protoc_insertion_point(field_get:Printer.PrinterStatus.temperature_inside_top)
  return _internal_temperature_inside_top();
}
inline void PrinterStatus::_internal_set_temperature_inside_top(float value) {
  
  temperature_inside_top_ = value;
}
inline void PrinterStatus::set_temperature_inside_top(float value) {
  _internal_set_temperature_inside_top(value);
  // @@protoc_insertion_point(field_set:Printer.PrinterStatus.temperature_inside_top)
}

// float temperature_inside_bottom = 4;
inline void PrinterStatus::clear_temperature_inside_bottom() {
  temperature_inside_bottom_ = 0;
}
inline float PrinterStatus::_internal_temperature_inside_bottom() const {
  return temperature_inside_bottom_;
}
inline float PrinterStatus::temperature_inside_bottom() const {
  // @@protoc_insertion_point(field_get:Printer.PrinterStatus.temperature_inside_bottom)
  return _internal_temperature_inside_bottom();
}
inline void PrinterStatus::_internal_set_temperature_inside_bottom(float value) {
  
  temperature_inside_bottom_ = value;
}
inline void PrinterStatus::set_temperature_inside_bottom(float value) {
  _internal_set_temperature_inside_bottom(value);
  // @@protoc_insertion_point(field_set:Printer.PrinterStatus.temperature_inside_bottom)
}

// .Printer.PrintConfig current_print_config = 5;
inline bool PrinterStatus::_internal_has_current_print_config() const {
  return this != internal_default_instance() && current_print_config_ != nullptr;
}
inline bool PrinterStatus::has_current_print_config() const {
  return _internal_has_current_print_config();
}
inline void PrinterStatus::clear_current_print_config() {
  if (GetArena() == nullptr && current_print_config_ != nullptr) {
    delete current_print_config_;
  }
  current_print_config_ = nullptr;
}
inline const ::Printer::PrintConfig& PrinterStatus::_internal_current_print_config() const {
  const ::Printer::PrintConfig* p = current_print_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Printer::PrintConfig*>(
      &::Printer::_PrintConfig_default_instance_);
}
inline const ::Printer::PrintConfig& PrinterStatus::current_print_config() const {
  // @@protoc_insertion_point(field_get:Printer.PrinterStatus.current_print_config)
  return _internal_current_print_config();
}
inline void PrinterStatus::unsafe_arena_set_allocated_current_print_config(
    ::Printer::PrintConfig* current_print_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_print_config_);
  }
  current_print_config_ = current_print_config;
  if (current_print_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Printer.PrinterStatus.current_print_config)
}
inline ::Printer::PrintConfig* PrinterStatus::release_current_print_config() {
  auto temp = unsafe_arena_release_current_print_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Printer::PrintConfig* PrinterStatus::unsafe_arena_release_current_print_config() {
  // @@protoc_insertion_point(field_release:Printer.PrinterStatus.current_print_config)
  
  ::Printer::PrintConfig* temp = current_print_config_;
  current_print_config_ = nullptr;
  return temp;
}
inline ::Printer::PrintConfig* PrinterStatus::_internal_mutable_current_print_config() {
  
  if (current_print_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::Printer::PrintConfig>(GetArena());
    current_print_config_ = p;
  }
  return current_print_config_;
}
inline ::Printer::PrintConfig* PrinterStatus::mutable_current_print_config() {
  // @@protoc_insertion_point(field_mutable:Printer.PrinterStatus.current_print_config)
  return _internal_mutable_current_print_config();
}
inline void PrinterStatus::set_allocated_current_print_config(::Printer::PrintConfig* current_print_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_print_config_;
  }
  if (current_print_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_print_config);
    if (message_arena != submessage_arena) {
      current_print_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_print_config, submessage_arena);
    }
    
  } else {
    
  }
  current_print_config_ = current_print_config;
  // @@protoc_insertion_point(field_set_allocated:Printer.PrinterStatus.current_print_config)
}

// repeated .Printer.PrintConfig print_configs = 6;
inline int PrinterStatus::_internal_print_configs_size() const {
  return print_configs_.size();
}
inline int PrinterStatus::print_configs_size() const {
  return _internal_print_configs_size();
}
inline void PrinterStatus::clear_print_configs() {
  print_configs_.Clear();
}
inline ::Printer::PrintConfig* PrinterStatus::mutable_print_configs(int index) {
  // @@protoc_insertion_point(field_mutable:Printer.PrinterStatus.print_configs)
  return print_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Printer::PrintConfig >*
PrinterStatus::mutable_print_configs() {
  // @@protoc_insertion_point(field_mutable_list:Printer.PrinterStatus.print_configs)
  return &print_configs_;
}
inline const ::Printer::PrintConfig& PrinterStatus::_internal_print_configs(int index) const {
  return print_configs_.Get(index);
}
inline const ::Printer::PrintConfig& PrinterStatus::print_configs(int index) const {
  // @@protoc_insertion_point(field_get:Printer.PrinterStatus.print_configs)
  return _internal_print_configs(index);
}
inline ::Printer::PrintConfig* PrinterStatus::_internal_add_print_configs() {
  return print_configs_.Add();
}
inline ::Printer::PrintConfig* PrinterStatus::add_print_configs() {
  // @@protoc_insertion_point(field_add:Printer.PrinterStatus.print_configs)
  return _internal_add_print_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Printer::PrintConfig >&
PrinterStatus::print_configs() const {
  // @@protoc_insertion_point(field_list:Printer.PrinterStatus.print_configs)
  return print_configs_;
}

// float fan_speed = 7;
inline void PrinterStatus::clear_fan_speed() {
  fan_speed_ = 0;
}
inline float PrinterStatus::_internal_fan_speed() const {
  return fan_speed_;
}
inline float PrinterStatus::fan_speed() const {
  // @@protoc_insertion_point(field_get:Printer.PrinterStatus.fan_speed)
  return _internal_fan_speed();
}
inline void PrinterStatus::_internal_set_fan_speed(float value) {
  
  fan_speed_ = value;
}
inline void PrinterStatus::set_fan_speed(float value) {
  _internal_set_fan_speed(value);
  // @@protoc_insertion_point(field_set:Printer.PrinterStatus.fan_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Printer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PrinterData_2eproto
